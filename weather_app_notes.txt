weather app that tells you the basic info and what other place on earth has very similar weather at that
moment. could link to info on the internets (i.e. wikipedia). not a hard core weather app but something
mildly informative and entertaining. Like, "It feels like Manaus outside!"

random thoughts:
 accuweather site is TOO graphic - like, too many pics, not enough straight info. i feel like it's harder 
 to get the facts of the weather right away - i guess the numbers. just too much crap on the screen. their
 iphone app is much better for having things simple and straightforward

 basic info comes up right away, but more details available easily - drop down menu? customizable?
 i just hate it when there's too much info cluttering up the page. but i also hate it when there's
 not enough info (i.e. weathercube)

 make a basic mockup with CSS, with fake data, to see how you'd like to set it up

 current: *temp
  				*sunny/cloudy/overcast/rainy etc
 					*"feels like"?
 					*pop
  				*highs/lows


 					humidity
 					dewpoint
 					wind speed (sustained & gusts)
 					wind direction
 					pressure
 					uv
 					windchill (winter)
 					visibility
 					snow depth
 					rainfall
 					cloud ceiling


so, for your app, you wouldn't need to include much of this extra info, just the basics, cuz it's just
supposed to be fun and slightly informative

-temp
-humidity, dewpoint
-sky conditions
-"realfeel" - because you're basing your comparisons on how it "feels" outside, right?
-wind
-precip

so for your comparison tool, you would only need current conditions


ok, andy's suggestions were:

create a class with the attributes(?)  values(?) characteristics that are necessary for each instance - so,
each city. what info do you need to determine which cities are like the query city? keep it simple to start
off, obviously it won't be super-scientific at the start. just get something working!
- find what info you can get from wunderground's api
- a. suggested grouping cities according to their conditions each time you make a request to the server (whether
	it's every hour you make the request, or whatever), so that when you want to display which cities are like
	"your own", they'll be in the same group as the requested city.
	- so these cities get grouped each time, automatically? according to pre-specified conditions
	- so conditions most important: temperature, humidity, conditions like is it sunny, cloudy, rainy, and so on
	- i think dewpoint will be important to the "feels like" component - which is really the focus of this app
	anyway. what does it feel like where you are and where else on earth feels the same?
	- start with just 3 main measures to base your comparisons on. temp, sky conditions, humidity and/or dewpoint
	- all measurements would have to be very similar in order to say the weather is similar across locations. need
	to figure out what your threshold for 'similarity' is (i.e. 2 degrees? exact same sky conditions?)
	- remember you're basing it on what it "feels like" so that should govern how you use measurements (i.e. maybe
	it's going to be dewpoint and not humidity cuz that affects how it really feels more). you want to create a 
	connection for the user to other places they might not otherwise think of or feel a connection to. takes you
	out of your own space for a bit.
	- "Where is Your Weather Like?"

	*It seems like most weather services update once an hour at the most, so developers are encouraged to cache API results to limit the number of calls for the same location

more for a general weather app:
- basic info comes up right away, but more details available easily. the info you want is customized by you, but
	lots of factors available.
- hate it when there's too much info cluttering up the screen. also dislike too little info (i.e. weathercube)
- make a basic mockup with CSS and fake data to see how you'd like to set it up

	keep in mind that you'll probably need to change these parameters for a couple reasons - it's simpler to skip dewpoint and humidity
	and just use 'feelslike' + weatherShort, and also maybe measurements like dewpoint aren't available at enough locations. you could run some tests
	that check to see how many stations come back as not valid (and why) and decide based on that what the best measurement strategy is
	you don't want to be rejecting a ton of interesting places just because you're missing a piece of data that could be replaced by 
	another one that could serve the same purpose. although i would imagine if things like humidity and dewpoint aren't measured, feelslike temp
	is probably also null. * i just found a case where this isn't true - no dewpoint or humidity, but a feelslike measure. what are they using to measure
	feelslike temp?
	at some point you're going to have to find out what the most accurate system is - the actual separate measurements, or relying on things like
	feelslike etc. also thinking that different sites will have different systems for feelslike. that's why i like the separate measurements better.

	so now i need a way to input files not from the command line? or just find a way to input more than one file from the command line
the question is, do you want your app to gather a bunch of data from different locations, then compare to the origin station, or take
the data from the origin, and search out locations that match the given criteria? i think either way you're going to end up having to
access a lot of data

basic info comes up right away for user location, but can be customized to show more details. i don't like too much info cluttering up the
screen, but i also dislike not enough info (a la weathercube)
make a basic mockup with CSS and fake data and see how you'd like to set it up

suggested grouping cities when you get data from the API (i'll likely be grouping regions). 2 step process - 1) get data and store it 2) compare
stored data to user location
start with the 4 basic measurements of temp, dewpoint, humidity and conditions and get a working copy going. then you can add more details as you
get functioning app happening, to increase accuracy
trying to create a connection for the user with other places in the world, places one wouldn't normally think about, so i'll try hard to make the
comparisons not obvious or repetitive. create some curiosity about other places in the world

change user input from command line to web. right now i don't think i'll need to store anything in a database but that could totally come up. make 
interactive web version first, to get a feel for how it'll work, then try mobile
user inputs on web
app contacts api for entered location, returns current conditions
then finds, let's say 5 other locations worldwide that are the same (if there are that many), making sure they're from very different regions and
not super local, so it's not boring or unsurprising.
maybe store previous matches so they don't come up constantly? i'll have to study test matches to see how often pairs of locations have the same
weather over a period of time (could use historical data if available). maybe repetition won't be a huge deal, we'll see
having data stored in separate files could help with this, if you grouped by region (like, northern europe, australia, and so on)
just saw a headline about Springfield, CO that described a temp drop from 78F to 47F in an hour. an extreme example, but it brings up the idea
of showing users what their weather will be like in near future ("your weather is like x now, but in 3 hours it will be like y")

# Issues:

# display of station names - you don't want the station name displayed cuz no one's really going to know what those are. you could use
# them behind the scenes to point to place names that ARE displayed to the user, database style. or you could write a method that converts
# the weird-sounding place names (like 'leader arpt (aut') to something more recognizable (like "Leader, SK"). although i have no idea how
# i would do that
# what does it say if there are no matches? could give options for 'rather similar' but not the same?

# file request for specific region:
# http://api.aerisapi.com/observations/search?query=state:nu&limit=100&client_id=yotRMCnX8QTlcpwPx71pg&client_secret=H2Nx8mcIPgZtCBLCV2KRPnh4T6n8LiIXejDMGgQx

look up all the stations! and the country codes. decide which stations you want to be using for comparison. will this affect which stations can
be used by users for comparison?